// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id          String   @id @default(uuid())
  name        String   @unique()
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user User[]

  @@map("genders")
}

enum Role {
  MEMBER
  LIBRARIAN
  ADMIN
  SUPER_ADMIN
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String?
  firstName   String
  middleName  String?
  lastName    String?
  dateOfBirth DateTime?
  phoneNumber String?
  picture     String?
  genderId    String?
  role        Role      @default(MEMBER)
  isValidate  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  oAuthTokens    OAuthToken[]
  twoFactorAuths TwoFactorAuth[]

  gender Gender? @relation(fields: [genderId], references: [id])

  member Member?

  @@map("users")
}

enum MemberStatus {
  ACTIVE
  DEACTIVE
  BANNED
}

model Member {
  id             String       @id @default(uuid())
  userId         String       @unique()
  identityNumber String       @unique()
  memberNumber   String
  address        String?
  hobby          String?
  topicTag       String?
  biodata        String?
  status         MemberStatus @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("members")
}

enum LibrarianStatus {
  ACTIVE
  DEACTIVE

  @@map("LibrarianStatus")
}

model Librarian {
  id              String          @id @default(uuid())
  identityNumber  String
  librarianNumber String
  address         String?
  status          LibrarianStatus @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())

  @@map("librarians")
}

enum AccountType {
  EMAIL
  GOOGLE
  FACEBOOK
}

model OAuthToken {
  id           String      @id @default(uuid())
  accessToken  String
  refreshToken String
  accountType  AccountType @default(EMAIL)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?

  @@map("o_auth_tokens")
}

enum TwoFactorAuthType {
  GoogleAuthenticator
}

model TwoFactorAuth {
  id        String            @id @default(uuid())
  userId    String
  secretKey String
  type      TwoFactorAuthType
  enable    Boolean
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  user      User              @relation(fields: [userId], references: [id])

  @@map("two_factor_auth")
}

model Book {
  id          String    @id @default(uuid())
  code        String
  title       String
  isbn        String
  year        Int
  description String
  imagePath   String
  author      String
  stock       Int
  categoryId  String    @unique
  publisherId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  category  BookCategory? @relation(fields: [categoryId], references: [id])
  publisher Publisher?    @relation(fields: [publisherId], references: [id])

  @@map("books")
}

model BookCategory {
  id          String    @id @default(uuid())
  code        String
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  book Book?

  @@map("book_categories")
}

model Publisher {
  id          String    @id @default(uuid())
  code        String
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  deletedAt   DateTime?

  book Book?

  @@map("publishers")
}
